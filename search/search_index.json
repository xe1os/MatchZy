{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MatchZy - Match Plugin for CS2!","text":"<p>MatchZy is a plugin for CS2 (Counter Strike 2) for running and managing practice/pugs/scrims/matches with easy configuration!</p> <p></p>"},{"location":"#what-can-matchzy-do","title":"What can MatchZy do?","text":"<p>MatchZy can solve a lot of match management requirements. It provides basic commands like <code>!ready</code>, <code>!unready</code>, <code>!pause</code>, <code>!unpause</code>, <code>!tac</code>, <code>!stop</code>, etc, provides matches stats, and much more!</p> <p>Feature Highligts:</p> <ul> <li>Pug mode with simple commands to manage!</li> <li>Support of Get5 Panel!</li> <li>Support BO1/BO3/BO5 and Veto when using Match configuration or Get5 Panel!</li> <li>Setting up matches and locking players into their team</li> <li>Practice Mode with <code>.bot</code>, <code>.spawn</code>, <code>.ctspawn</code>, <code>.tspawn</code>, <code>.nobots</code>, <code>.rethrow</code>, <code>.last</code>, <code>.timer</code>, <code>.clear</code>, <code>.exitprac</code> and many more commands!</li> <li>Knife round (With expected logic, i.e., team with most players win. If same number of players, then team with HP advantage wins. If same HP, winner is decided randomly)</li> <li>Automatically starts demo recording and stop recording when match is ended (Make sure you have tv_enable 1)</li> <li>Automatically uploads demo on map end on the given URL.</li> <li>Players whitelisting (Thanks to DEAFPS!)</li> <li>Coaching system</li> <li>Damage report after every round</li> <li>Support for round restore (Currently using the vanilla valve's backup system)</li> <li>Ability to create admin and allowing them access to admin commands</li> <li>Database Stats and CSV Stats! MatchZy stores data and stats of all the matches in a local SQLite database (MySQL Database is also supported!) and also creates a CSV file for detailed stats of every player in that match!</li> <li>Provides easy configuration</li> <li>And much more!!</li> </ul>"},{"location":"commands/","title":"Usage Commands","text":"<p>Most of the commands can also be used using ! prefix instead of . (like !ready)</p> <ul> <li><code>.ready</code> Marks the player ready</li> <li><code>.unready</code> Marks the player unready</li> <li><code>.forceready</code> Force-readies the player's team (Only works when using Match setup using JSON/Get5)</li> <li><code>.pause</code> Pauses the match in freezetime (Tactical or normal pause, depends on <code>matchzy_use_pause_command_for_tactical_pause</code>).</li> <li><code>.tech</code> Pauses the match in freezetime.</li> <li><code>.unpause</code> Request for unpausing the match. Both teams need to type .unpause to unpause the match</li> <li><code>.stay</code> Stays on the same side (For knife winner, after the knife round)</li> <li><code>.switch</code>/<code>.swap</code> Switches the side (For knife winner, after the knife round)</li> <li><code>.stop</code> Restore the backup of the current round (Both teams need to type .stop to restore the current round)</li> <li><code>.tac</code> Starts a tactical timeout</li> <li><code>.coach &lt;side&gt;</code> Starts coaching the specified side. Example: <code>.coach t</code> to start coaching terrorist side!</li> </ul>"},{"location":"commands/#practice-mode-commands","title":"Practice Mode Commands","text":"<ul> <li><code>.spawn &lt;number&gt;</code> Spawns to the provided competitive spawn number of same team</li> <li><code>.ctspawn &lt;number&gt;</code> Spawns to the provided competitive spawn number of CT</li> <li><code>.tspawn &lt;number&gt;</code> Spawns to the provided competitive spawn number of T</li> <li><code>.bot</code> Adds a bot on user's current position</li> <li><code>.crouchbot</code> Adds a crouched bot on user's current position</li> <li><code>.boost</code> Adds a bot on current position and boosts player on it</li> <li><code>.crouchboost</code> Adds a crouched bot on current position and boosts player on it</li> <li><code>.ct</code>, <code>.t</code>, <code>.spec</code> Changes player team to the requested team</li> <li><code>.fas</code> / <code>.watchme</code> Forces all players into spectator except the player who called this command</li> <li><code>.nobots</code> Removes all the bots</li> <li><code>.clear</code> Clears all the active smokes, molotoves and incendiaries</li> <li><code>.fastforward</code> Fastforwards the server time to 20 seconds</li> <li><code>.noflash</code> Toggles immunity for flashbang (it will still blind others with noflash disabled)</li> <li><code>.dryrun</code> Turns on dry-run mode</li> <li><code>.god</code> Turns on god mode</li> <li><code>.savenade &lt;name&gt; &lt;optional description&gt;</code> Saves a lineup</li> <li><code>.loadnade &lt;name&gt;</code> Loads a lineup</li> <li><code>.deletenade &lt;name&gt;</code> Deletes a lineup from file</li> <li><code>.importnade &lt;code&gt;</code> Upon saving a lineup a code will be printed to chat, alternatively those can be retrieved from the savednades.cfg</li> <li><code>.listnades &lt;optional filter&gt;</code> Lists either all saved lineups ever or if given a filter only those that match the filter</li> <li><code>.break</code> Breaks all the breakable entities (glass windows, wooden doors, vents, etc)</li> <li><code>.rethrow</code> Rethrows your last thrown grenade</li> <li><code>.timer</code> Starts a timer immediately and stops it when you type .timer again, telling you the duration of time</li> <li><code>.last</code> Teleports you back to where you threw your last grenade from</li> <li><code>.back &lt;number&gt;</code> Teleports you back to the provided position in your grenade history</li> <li><code>.delay &lt;delay_in_seconds&gt;</code> Sets a delay on your last grenade. This is only used when using .rethrow or .throwindex</li> <li><code>.throwindex &lt;index&gt; &lt;optional index&gt; &lt;optional index&gt;</code> Throws grenade of provided position(s) from your grenade thrown history. Example: <code>.throwindex 1 2</code> will throw your 1st and 2nd grenade. <code>.throwindex 4 5 8 9</code> will throw your 4th, 5th, 8th and 9th grenade (If you've added delay in grenades, they'll be thrown with their specific delay).</li> <li><code>.lastindex</code> Prints index number of your last thrown grenade.</li> <li><code>.rethrowsmoke</code> Throws your last thrown smoke grenade.</li> <li><code>.rethrownade</code> Throws your last thrown HE grenade.</li> <li><code>.rethrowflash</code> Throws your last thrown flash.</li> <li><code>.rethrowmolotov</code> Throws your last thrown molotov.</li> <li><code>.rethrowdecoy</code> Throws your last thrown decoy.</li> </ul>"},{"location":"commands/#admin-commands","title":"Admin Commands","text":"<ul> <li><code>.start</code> Force starts a match.</li> <li><code>.restart</code> Force restarts/resets a match.</li> <li><code>.forcepause</code> Pauses the match as an admin (Players cannot unpause the admin-paused match). (<code>.fp</code> for shorter command)</li> <li><code>.forceunpause</code> Force unpauses the match. (<code>.fup</code> for shorter command)</li> <li><code>.restore &lt;round&gt;</code> Restores the backup of provided round number.</li> <li><code>.roundknife</code> / <code>.rk</code> Toggles the knife round. If disabled, match will directly go from Warmup phase to Live phase.</li> <li><code>.playout</code> Toggles playout (If playout is enabled, all rounds would be played irrespective of winner. Useful in scrims!)</li> <li><code>.whitelist</code> Toggles whitelisting of players. To whitelist a player, add the steam64id in <code>cfg/MatchZy/whitelist.cfg</code></li> <li><code>.readyrequired &lt;number&gt;</code> Sets the number of ready players required to start the match. If set to 0, all connected players will have to ready-up to start the match.</li> <li><code>.settings</code> Displays the current setting, like whether knife is enabled or not, value of readyrequired  players, etc.</li> <li><code>.map &lt;mapname&gt;</code> Changes the map</li> <li><code>.asay &lt;message&gt;</code> Say as an admin in all chat</li> <li><code>.reload_admins</code> Reloads admins from <code>admins.json</code></li> <li><code>.team1 &lt;name&gt;</code> Sets name for Team 1 (CT by default)</li> <li><code>.team2 &lt;name&gt;</code> Sets name for Team 2 (Terrorist by default)</li> <li><code>.prac</code> Starts Practice Mode</li> <li><code>.exitprac</code> Exits from practice mode and loads Match mode.</li> <li><code>.rcon &lt;command&gt;</code> Sends command to the server</li> </ul>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#configuration","title":"Configuration","text":"<p>All the configuration files related to MatchZy can be found in <code>csgo/cfg/MatchZy</code> (If you have extracted the contents properly, <code>MatchZy</code> folder should be there inside the cfg folder).</p>"},{"location":"configuration/#creating-admins","title":"Creating Admins","text":"<p>There are two ways to create an admin for MatchZy; you can choose the most convenient one according to your preference.</p> <ol> <li> <p>Using CSSharp's Admin system:</p> <p>You can create a new entry in the <code>/addons/counterstrikesharp/configs/admins.json</code> file with appropirate flags like mentioned in the below example: <pre><code>{\n\"WD-\": {\n    \"identity\": \"76561198154367261\",\n    \"flags\": [\n    \"@css/root\"\n    ]\n},\n\"Another admin\": {\n    \"identity\": \"SteamID 2\",\n    \"flags\": [\n    \"@css/config\",\n    \"@css/rcon\"\n    ]\n}\n}\n</code></pre></p> <p>Flag-wise permissions:</p> <ul> <li><code>@css/root</code>: Grants access to all admin commands</li> <li><code>@css/config</code>: Grants access to config related admin commands</li> <li><code>@custom/prac</code>: Grants access to practice related admin commands</li> <li><code>@css/map</code>: Grants access to change map and toggle practice mode</li> <li><code>@css/rcon</code>: Grants access to trigger RCON commands using <code>!rcon &lt;command&gt;</code></li> <li><code>@css/chat</code>: Grants access to send admin chat messages using <code>!asay &lt;message&gt;</code></li> </ul> </li> <li> <p>Using MatchZy's Admin system:</p> <p>Inside <code>csgo/cfg/MatchZy</code>, a file named <code>admins.json</code> should be present. If it is not there, it will be automatically created when the plugin is loaded. You can add Steam64 id of admins in that JSON file like mentioned in the below example:</p> <pre><code>{\n    \"76561198154367261\": \"\",\n    \"&lt;another_steam_id&gt;\": \"\"\n}\n</code></pre> </li> </ol>"},{"location":"configuration/#configuring-matchzy-settings-convars","title":"Configuring MatchZy Settings (ConVars)","text":"<p>Again, inside <code>csgo/cfg/MatchZy</code>, a file named <code>config.cfg</code> should be present. This file is executed whenever the plugin is loaded. If you make any changes in this file and want to reload the config, simply execute <code>exec MatchZy/config.cfg</code> command on the server.</p>"},{"location":"configuration/#matchzy_knife_enabled_default","title":"<code>matchzy_knife_enabled_default</code>","text":"Whether knife round is enabled by default or not. This is the default value, but knife can be toggled by admins using .roundknife command.<code>Default: true</code>"},{"location":"configuration/#matchzy_minimum_ready_required","title":"<code>matchzy_minimum_ready_required</code>","text":"Minimum ready players required to start the match. If set to 0, all connected players have to ready-up to start the match.<code>Default: 2</code>"},{"location":"configuration/#matchzy_stop_command_available","title":"<code>matchzy_stop_command_available</code>","text":"Whether !stop/.stop command to restore the backup of the current round is enabled by default or not.<code>Default: false</code>"},{"location":"configuration/#matchzy_pause_after_restore","title":"<code>matchzy_pause_after_restore</code>","text":"Whether to pause the match after round restore or not. Players can unpause the match using !unpause/.unpause. (Both the teams will have to use unpause command) or admins can use <code>.fup</code> to force-unpause the game<code>Default: true</code>"},{"location":"configuration/#matchzy_whitelist_enabled_default","title":"<code>matchzy_whitelist_enabled_default</code>","text":"Whether whitelist is enabled by default or not. This is the default value, but whitelist can be toggled by admin using <code>.whitelist</code> command<code>Default: false</code>"},{"location":"configuration/#matchzy_kick_when_no_match_loaded","title":"<code>matchzy_kick_when_no_match_loaded</code>","text":"Whether to kick all clients and prevent anyone from joining the server if no match is loaded. This means if server is in match mode, a match needs to be set-up using <code>matchzy_loadmatch</code>/<code>matchzy_loadmatch_url</code> to load and configure a match.<code>Default: false</code>"},{"location":"configuration/#matchzy_demo_path","title":"<code>matchzy_demo_path</code>","text":"Path of folder in which demos will be saved. If defined, it must not start with a slash and must end with a slash. Set to empty string to use the csgo root. Example: <code>matchzy_demo_path MatchZy/</code><code>Default: MatchZy/</code>"},{"location":"configuration/#matchzy_demo_name_format","title":"<code>matchzy_demo_name_format</code>","text":"Format of demo filname. You may use {TIME}, {MATCH_ID}, {MAP}, {MAPNUMBER}, {TEAM1} and {TEAM2}. Demo files will be named according to the format specified. Do not include .dem format, it will be added automatically. Make sure to keep {TIME} in the format to create a unique demo file everytime.<code>Default: \"{TIME}_{MATCH_ID}_{MAP}_{TEAM1}_vs_{TEAM2}\"</code>"},{"location":"configuration/#matchzy_demo_upload_url","title":"<code>matchzy_demo_upload_url</code>","text":"If defined, recorded demo will be uploaded to this URL once the map ends. Make sure that the URL is wrapped in double quotes (\"\").  Example: <code>matchzy_demo_upload_url \"https://your-website.com/upload-endpoint\"</code> <code>Default: \"\"</code>"},{"location":"configuration/#matchzy_kick_when_no_match_loaded_1","title":"<code>matchzy_kick_when_no_match_loaded</code>","text":"Whether to kick all clients and prevent anyone from joining the server if no match is loaded. This means if server is in match mode, a match needs to be set-up using <code>matchzy_loadmatch</code>/<code>matchzy_loadmatch_url</code> to load and configure a match.<code>Default: false</code>"},{"location":"configuration/#matchzy_chat_prefix","title":"<code>matchzy_chat_prefix</code>","text":"Chat prefix to show whenever a MatchZy message is sent to players. Available Colors: {Default}, {Darkred}, {Green}, {LightYellow}, {LightBlue}, {Olive}, {Lime}, {Red}, {Purple}, {Grey}, {Yellow}, {Gold}, {Silver}, {Blue}, {DarkBlue}, {BlueGrey}, {Magenta} and {LightRed}. Make sure to end your prefix with {Default} to avoid coloring the messages in your prefix color.<code>Default: [{Green}MatchZy{Default}]</code>"},{"location":"configuration/#matchzy_admin_chat_prefix","title":"<code>matchzy_admin_chat_prefix</code>","text":"Chat prefix to show whenever an admin sends message using <code>.asay &lt;message&gt;</code>. Avaiable Colors are mentioned above.<code>Default: [{Red}ADMIN{Default}]</code>"},{"location":"configuration/#matchzy_chat_messages_timer_delay","title":"<code>matchzy_chat_messages_timer_delay</code>","text":"Number of seconds of delay before sending reminder messages from MatchZy (like unready message, paused message, etc). Note: Changing this timer wont affect the active timer, so if you change this setting in warmup, you will have to restart warmup to make the change effective.<code>Default: 13[{Red}ADMIN{Default}]</code>"},{"location":"configuration/#matchzy_playout_enabled_default","title":"<code>matchzy_playout_enabled_default</code>","text":"Whether playout (play max rounds) is enabled. This is the default value, but playout can be toggled by admin using <code>.playout</code> command.<code>Default: false</code>"},{"location":"configuration/#matchzy_reset_cvars_on_series_end","title":"<code>matchzy_reset_cvars_on_series_end</code>","text":"Whether parameters from the cvars section of a match configuration are restored to their original values when a series ends.<code>Default: true</code>"},{"location":"configuration/#matchzy_use_pause_command_for_tactical_pause","title":"<code>matchzy_use_pause_command_for_tactical_pause</code>","text":"Whether to use !pause/.pause command for tactical pause or normal pause (unpauses only when both teams use unpause command, for admin force-unpauses the game).<code>Default: false</code>"},{"location":"configuration/#matchzy_autostart_mode","title":"<code>matchzy_autostart_mode</code>","text":"Whether the plugin will load the match mode, the practice moder or neither by startup. 0 for neither, 1 for match mode, 2 for practice mode.<code>Default: 1</code>"},{"location":"configuration/#matchzy_save_nades_as_global_enabled","title":"<code>matchzy_save_nades_as_global_enabled</code>","text":"Whether nades should be saved globally instead of being privated to players by default or not.<code>Default: false</code>"},{"location":"configuration/#matchzy_allow_force_ready","title":"<code>matchzy_allow_force_ready</code>","text":"Whether force ready using !forceready is enabled or not (Currently works in Match Setup only).<code>Default: true</code>"},{"location":"configuration/#matchzy_max_saved_last_grenades","title":"<code>matchzy_max_saved_last_grenades</code>","text":"Maximum number of grenade history that may be saved per-map, per-client. Set to 0 to disable the limit and allow unlimited grenades to be stored.<code>Default: 512</code>"},{"location":"configuration/#configuring-warmupknifeliveprac-cfgs","title":"Configuring Warmup/Knife/Live/Prac CFGs","text":"<p>Again, inside <code>csgo/cfg/MatchZy</code>, files named <code>warmup.cfg</code>, <code>knife.cfg</code>, <code>live.cfg</code> and <code>prac.cfg</code> should be present. These configs are executed when Warmup, Knife, Live and Practice Mode is started respectively.</p> <p>You can modify these files according to your requirements.</p> <p>If these configs are not found in the expected location, MatchZy executes the default configs which are present in the code.</p>"},{"location":"configuration/#whitelisting-players","title":"Whitelisting players","text":"<p>Again, inside <code>csgo/cfg/MatchZy</code>, there will be a file called <code>whitelist.cfg</code>. You can add Steam64 id of whitelisted players like mentioned in the below example:</p> <pre><code>76561198154367261\nsteamid2\nsteamid3\n</code></pre>"},{"location":"configuration/#matchplayers-stats-and-data","title":"Match/Players Stats and Data","text":""},{"location":"configuration/#database-stats","title":"Database Stats","text":"<p>MatchZy comes with a default database (SQLite), which configures itself automatically. MySQL Database can also be used with MatchZy! Currently we are using 2 tables, <code>matchzy_stats_matches</code> and <code>matchzy_stats_players</code>. As their names suggest, <code>matchzy_stats_matches</code> holds the data of every match, like matchid, team names, scores, etc. Whereas, <code>matchzy_stats_players</code> stores data/stats of every player who played in that match. It stores data like matchid, kills, deaths, assists, and other important stats!</p>"},{"location":"configuration/#using-mysql-database-with-matchzy","title":"Using MySQL Database with MatchZy","text":"<p>To use MySQL Database with MatchZy, open <code>csgo/cfg/MatchZy/database.json</code> file. It's content will be like this: <pre><code>{\n    \"DatabaseType\": \"SQLite\",\n    \"MySqlHost\": \"your_mysql_host\",\n    \"MySqlDatabase\": \"your_mysql_database\",\n    \"MySqlUsername\": \"your_mysql_username\",\n    \"MySqlPassword\": \"your_mysql_password\",\n    \"MySqlPort\": 3306\n}\n</code></pre> Here, change the <code>DatabaseType</code> from <code>SQLite</code> to <code>MySQL</code> and then fill-up all the other details like host, database, username, etc. MySQL Database is useful for those who wants to use a common database across multiple servers!</p>"},{"location":"configuration/#csv-stats","title":"CSV Stats","text":"<p>Once a match is over, data is pulled from the database and a CSV file is written in the folder: <code>csgo/MatchZy_Stats</code>. This folder will contain CSV file for each match (file name pattern: <code>match_data_map{mapNumber}_{matchId}.csv</code>) and it will have the same data which is present in <code>matchzy_stats_players</code>.</p> <p>There is a scope of improvement here, like having the match score in the CSV file or atleast in the file name patter. I'll make this change soon!</p>"},{"location":"credits/","title":"Credits and thanks!","text":"<ul> <li>Get5 - A lot of functionalities and workings have been referred from Get5 and they did an amazing job for managing matches in CS:GO. Huge thanks to them!</li> <li>G5V and G5API - Amazing work with the web panel for managing the servers!</li> <li>eBot - Amazing job in CS:GO and then provided this great panel again in CS2 which is helping a lot of organizers now. Some logics have been referred from eBot as well!</li> <li>CounterStrikeSharp - Amazing job with development of CSSharp which gave us a platform to build our own plugins and also sparked my interest in plugin development!</li> <li>AlliedModders and community - They are the reason this whole plugin was possible! They are very helpful and inspire a lot!</li> <li>LOTGaming - Helped me a lot with initial testing and provided servers on different systems and locations!</li> <li>CHR15cs - Helped me a lot with the practice mode!</li> <li>K4ryuu - Awesome job on damage report!</li> <li>DEAFPS - Great contribution for Practice mode!</li> </ul>"},{"location":"database_stats/","title":"Database Stats","text":""},{"location":"database_stats/#matchplayers-stats-and-data","title":"Match/Players Stats and Data","text":"<p>MatchZy comes with a default database (SQLite), which configures itself automatically. MySQL Database can also be used with MatchZy! Currently we are using 3 tables, <code>matchzy_stats_matches</code>, <code>matchzy_stats_maps</code> and <code>matchzy_stats_players</code>.</p> <p>As their names suggest, <code>matchzy_stats_matches</code> holds the data of every match, like matchid, team names, scores, etc. <code>matchzy_stats_maps</code> stores data of every map in a match. Whereas, <code>matchzy_stats_players</code> stores data/stats of every player who played in that match. It stores data like matchid, kills, deaths, assists, and other important stats!</p>"},{"location":"database_stats/#using-mysql-database-with-matchzy","title":"Using MySQL Database with MatchZy","text":"<p>To use MySQL Database with MatchZy, open <code>csgo/cfg/MatchZy/database.json</code> file. It's content will be like this: <pre><code>{\n    \"DatabaseType\": \"SQLite\",\n    \"MySqlHost\": \"your_mysql_host\",\n    \"MySqlDatabase\": \"your_mysql_database\",\n    \"MySqlUsername\": \"your_mysql_username\",\n    \"MySqlPassword\": \"your_mysql_password\",\n    \"MySqlPort\": 3306\n}\n</code></pre> Here, change the <code>DatabaseType</code> from <code>SQLite</code> to <code>MySQL</code> and then fill-up all the other details like host, database, username, etc. MySQL Database is useful for those who wants to use a common database across multiple servers!</p>"},{"location":"database_stats/#csv-stats","title":"CSV Stats","text":"<p>Once a match is over, data is pulled from the database and a CSV file is written in the folder: <code>csgo/MatchZy_Stats</code>. This folder will contain CSV file for each match (file name pattern: <code>match_data_map{mapNumber}_{matchId}.csv</code>) and it will have the same data which is present in <code>matchzy_stats_players</code>.</p> <p>There is a scope of improvement here, like having the match score in the CSV file or atleast in the file name patter. I'll make this change soon!</p>"},{"location":"developers/","title":"Developers","text":"<p>Since this plugin is built on C#, .NET 7.0 SDK will be required if you intend to make changes in this plugin. Once you have that installed,</p> <ol> <li>Clone the repository</li> <li>Use <code>dotnet restore</code> to restore and install the dependencies.</li> <li>Make your changes</li> <li>Use <code>dotnet publish</code> command and you'll get a folder called <code>bin</code> in your plugin directory.</li> <li>Navigate to <code>bin/Debug/net7.0/publish/</code>and copy all the content from there and paste it into <code>csgo/addons/counterstrikesharp/plugins/MatchZy</code> (CounterStrikeSharp.API.dll and CounterStrikeSharp.API.pdb can be skipped)</li> <li>It's done! Now you can test your changes, and also contribute to the plugin if you want to :p </li> </ol>"},{"location":"donation/","title":"Donation","text":"<p>Support MatchZy and contribute towards building the best plugin for Pugs/Matches/Scrim/Practice :D</p>"},{"location":"donation/#buy-me-a-coffee","title":"Buy Me A Coffee","text":""},{"location":"donation/#steam-tradelink","title":"Steam Tradelink","text":"<p>https://steamcommunity.com/tradeoffer/new/?partner=194101533&amp;token=1TI76S3p</p>"},{"location":"get5/","title":"Get5 Panel","text":""},{"location":"get5/#get5-panel","title":"Get5 Panel","text":"<p>MatchZy can work with Get5 Web panel (G5V and G5API) to setup and manage matches!</p>"},{"location":"get5/#features","title":"Features","text":"<ol> <li>Create teams and setup matches from web panel</li> <li>Support for BO1, BO3, BO5, etc with Veto and Knife Round</li> <li>Get veto, scores and player stats live on the panel</li> <li>Get demo uploaded automatically on the panel (which can be downloaded from its match page)</li> <li>Pause and unpause game from the panel</li> <li>Add players in a live game</li> <li>And much more!!!</li> </ol>"},{"location":"get5/#how-to-use-get5-panel-with-matchzy","title":"How to use Get5 Panel with MatchZy?","text":"<p>It's pretty simple, just install Get5 panel, add your server in it and you will be able to create and manage matches just like Get5 CSGO :D</p>"},{"location":"get5/#installing-get5-panel","title":"Installing Get5 Panel","text":"<p>To use Get5 panel, G5V and G5API are required</p>"},{"location":"get5/#without-docker","title":"Without Docker","text":""},{"location":"get5/#install-g5v","title":"Install G5V","text":"<p>You can refer to the installation steps given here: https://github.com/PhlexPlexico/G5V/wiki/Installation</p>"},{"location":"get5/#install-g5api","title":"Install G5API","text":"<p>You can refer to the installation steps given here: https://github.com/PhlexPlexico/G5API/wiki</p>"},{"location":"get5/#using-docker","title":"Using Docker","text":"<p>docker-compose.yml file:</p> docker-compose.yml example<pre><code>version: \"3.7\"\n\nservices:\n  redis:\n    image: redis:6\n    command: redis-server --requirepass Z3fZeK9W6jBfMJY\n    container_name: redis\n    networks:\n      - get5\n    restart: always\n\n  get5db:\n    image: yobasystems/alpine-mariadb\n    container_name: get5db\n    restart: always\n    networks:\n      - get5\n    environment:\n      - MYSQL_ROOT_PASSWORD=FJqXv2dd3TeFAn3\n      - MYSQL_DATABASE=get5\n      - MYSQL_USER=get5\n      - MYSQL_PASSWORD=FJqXv2dd3TeFAn3\n      - MYSQL_CHARSET=utf8mb4\n      - MYSQL_COLLATION=utf8mb4_general_ci\n    ports:\n      - 3306:3306\n\n  caddy:\n    image: lucaslorentz/caddy-docker-proxy:ci-alpine\n    container_name: caddy-reverse-proxy\n    restart: unless-stopped\n    networks:\n      - get5\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    ports:\n      - 80:80\n      - 443:443\n    environment:\n      - CADDY_INGRESS_NETWORKS=get5\n\n  g5api:\n    image: ghcr.io/phlexplexico/g5api:latest\n    depends_on:\n      - get5db\n    container_name: G5API\n    networks:\n      - get5\n    labels:\n      caddy: your-domain.com\n      caddy.handle_path: /api/*\n      caddy.handle_path.0_reverse_proxy: \"{{upstreams 3301}}\"\n    volumes:\n      - ./public:/Get5API/public\n    environment:\n      - NODE_ENV=production\n      - PORT=3301\n      - DBKEY=0fc9c89ce985fa8066398b1be5c730f7 #CHANGME https://www.random.org/cgi-bin/randbyte?nbytes=16&amp;format=h\n      - STEAMAPIKEY=FE315E4DAA500737EC827E9A77018971\n      - HOSTNAME=https://your-domain.com\n      - SHAREDSECRET= Z3TLmUEVpvXdE5H7UdnEbNSySak9gj\n      - CLIENTHOME=https://your-domain.com\n      - APIURL=https://your-domain.com/api\n      - SQLUSER=get5\n      - SQLPASSWORD=FJqXv2dd3TeFAn3\n      - SQLPORT=3306\n      - DATABASE=get5\n      - SQLHOST=get5db\n      - ADMINS=76561198154367261\n      - SUPERADMINS=76561198154367261\n      - REDISURL=redis://:Z3fZeK9W6jBfMJY@redis:6379\n      - REDISTTL=86400\n      - USEREDIS=true\n      - UPLOADDEMOS=true\n      - LOCALLOGINS=false\n    restart: always\n\n  g5v:\n    image: ghcr.io/phlexplexico/g5v:latest\n    depends_on:\n      - g5api\n    container_name: G5V-Front-End\n    networks:\n      - get5\n    restart: always\n    labels:\n      caddy: your-domain.com\n      caddy.reverse_proxy: \"{{upstreams}}\"\n\nnetworks:\n  get5:\n    external: true\n</code></pre> <p>In this file, following changes will be needed:</p> <ol> <li>Change <code>your-domain.com</code> to your DNS or Domain</li> <li>Change MySQL and Redis password if needed</li> <li>Add <code>ADMINS</code> and <code>SUPERADMINS</code> as per your need (Steam64ID, comma sepearated if you want to add multiple admins)</li> </ol> <p>Commands to run to download and install this yml file:</p> <pre><code>sudo apt-get update\napt install docker.io\napt install docker-compose\n\ndocker network create -d bridge get5\ndocker-compose -f /path/to/your/docker-compose-file.yml up -d\n</code></pre>"},{"location":"get5/#current-limitations-with-get5-integration","title":"Current Limitations with Get5 Integration","text":"<ol> <li>Stats like KAST, Teammates Flashed, Flashbang Assists, Knife Kills, Bomb plants and defuses are missing and will be shown as 0</li> <li>Coaches cannot be added from the panel (player can type <code>.coach &lt;side&gt;</code> to start coaching)</li> <li>Backups cannot be listed and restored from the panel (ingame commands for restoring like <code>.stop</code> and <code>.restore &lt;roundnumber&gt;</code> will work as expected)</li> </ol>"},{"location":"getting_started/","title":"Getting Started","text":"<p>By default, the plugin will start in <code>pug</code> mode, which means teams won't be locked. Players and admins can use available commands Below are the available modes of the plugin:</p> <ol> <li>Pug mode (by default)</li> <li>Practice mode - This can be started by admins using <code>.prac</code> command</li> <li>Scrim mode - This can be toggled by admins using <code>.playout</code> command. It will enable playout of all rounds.</li> <li>Match mode - This can be set-up by providing a match json</li> </ol> <p>Below are some basic admin commands which can be used for the initial configuration:</p> <ul> <li><code>.start</code> Force starts a match. </li> <li><code>.restart</code> Force restarts/resets a match.</li> <li><code>.readyrequired &lt;number&gt;</code> Sets the number of ready players required to start the match. If set to 0, all connected players will have to ready-up to start the match.</li> <li><code>.roundknife</code> Toggles the knife round. If disabled, match will directly go from Warmup phase to Live phase.</li> <li><code>.map &lt;mapname&gt;</code> Changes the map</li> </ul>"},{"location":"gotv/","title":"GOTV & Demos","text":""},{"location":"gotv/#gotv-broadcast","title":"GOTV Broadcast","text":"<p>MatchZy makes no changes to the broadcasting part of the GOTV, but will automatically adjust the <code>mp_match_restart_delay</code> when a map ends if GOTV is enabled to ensure that it won't be shorter than what is required for the GOTV broadcast to finish.</p> <p>Don't mess too much with the TV!</p> <p>Changing <code>tv_delay</code> or <code>tv_enable</code> in <code>warmup.cfg</code>, <code>live.cfg</code> etc. is going to cause problems with your demos. We recommend you set <code>tv_delay</code> either on your server in general.</p>"},{"location":"gotv/#recording-demos","title":"Recording Demos","text":"<p>MatchZy records the demos automatically. It recording starts once all teams have readied up and ends following a map result.</p> <p>Path of demos can be configured using <code>matchzy_demo_path &lt;directory&gt;/</code>. If defined, it must not start with a slash and must end with a slash. Set to empty string to use the csgo root.</p> <p>Demo files will be named according to <code>matchzy_demo_name_format</code>. The default format is: <code>\"{TIME}_{MATCH_ID}_{MAP}_{TEAM1}_vs_{TEAM2}\"</code></p> <p>Broadcast delay on GOTV recording</p> <p>When the GOTV recording stops, the server will flush its framebuffer to disk. This may cause a lag spike or a complete freeze of the GOTV broadcast if you have a substantial <code>tv_delay</code>, so MatchZy will wait until the entire match has been broadcast before it stops recording the demo.</p>"},{"location":"gotv/#automatic-upload","title":"Automatic Upload","text":"<p>In addition to recording demos, MatchZy can also upload them to a URL when the recording stops. You can define the upload URL with <code>matchzy_demo_upload_url &lt;upload_url&gt;</code>. The HTTP body will be the zipped demo file, and you can read the headers for file metadata.</p> <p>Example: <code>matchzy_demo_upload_url \"https://your-website.com/upload-endpoint\"</code></p>"},{"location":"gotv/#headers","title":"Headers","text":"<p>MatchZy will add these HTTP headers to its demo upload request:</p> <ol> <li><code>MatchZy-FileName</code> is the name of the demo file</li> <li><code>MatchZy-MapNumber</code> is the zero-indexed map number in the series.</li> <li><code>MatchZy-MatchId</code> Unique ID of the match.</li> </ol>"},{"location":"gotv/#example","title":"Example","text":"<p>This is an example of how a Node.js web server using Express might read the demo upload request sent by MatchZy.</p> <p>Proof of concept only</p> <p>This is a simple proof-of-concept and should not be blindly copied to a production system. It has no HTTPS support and is only meant to demonstrate the key aspects of reading a potentially large POST request.</p> Node.js example<pre><code>const express = require('express');\nconst path = require('path');\nconst fs = require('fs');\n\nconst app = express();\nconst port = 3000;\n\napp.post('/upload', function (req, res) {\n\n    // Read the MatchZy headers to know what to do with the file.\n    const filename = req.header('MatchZy-FileName');\n    const matchId = req.header('MatchZy-MatchId');\n    const mapNumber = req.header('MatchZy-MapNumber');\n\n    // Put all demos for the same match in a folder.\n    const folder = path.join(__dirname, 'demos', matchId);\n    if (!fs.existsSync(folder)) {\n       fs.mkdirSync(folder, {recursive: true});\n    }\n    // Create a stream and point it to a file, using the filename from the header.\n    let writeStream = fs.createWriteStream(path.join(folder, filename));\n\n    // Pipe the request body into the stream.\n    req.pipe(writeStream);\n\n    // Wait for the request to end and reply with 200.\n    req.on('end', () =&gt; {\n       writeStream.end();\n       res.status(200);\n       res.end('Success');\n    });\n\n    // If there is a problem writing the file, reply with 500.\n    writeStream.on('error', function (err) {\n       res.status(500);\n       res.end('Error writing demo file: ' + err.message);\n    });\n\n })\n\napp.listen(port);\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<ul> <li>Install Metamod</li> <li>Install CounterStrikeSharp (CSSharp). (Note: This step can be skipped if you install MatchZy with CSSharp release)<ul> <li>Go to this link: https://github.com/roflmuffin/CounterStrikeSharp/releases</li> <li>Scroll down and download 'counterstrikesharp-with-runtime'</li> <li>Extract the addons folder to the csgo/ directory of the dedicated server. The contents of your addons folder should contain both the counterstrikesharp folder and the metamod folder</li> <li>Verify the installation by typing <code>meta list</code> on server console. You should see CounterStrikeSharp plugin by Roflmuffin</li> <li>You can refer to https://docs.cssharp.dev/guides/getting-started for detailed instructions. Initially, it may seem a bit hectic, but trust me, it's worth it! :P </li> </ul> </li> <li>Install MatchZy <ul> <li>Download the latest MatchZy release and extract the files to the csgo/ directory of the dedicated server.</li> <li>Verify the installation by typing <code>css_plugins list</code> and you should see MatchZy by WD- listed there.</li> </ul> </li> </ul> <p>Note: If you want to use MatchZy on Windows server, you will need Windows build of <code>counterstrikesharp</code> which is available on its releases page</p>"},{"location":"match_setup/","title":"Match Setup","text":""},{"location":"match_setup/#what-is-it","title":"What is it?","text":"<p>A match configuration file contains everything that MatchZy and your server needs to host a series. This includes locking players to their correct team and side, setting the map(s) and configuring the game rules.</p> <p>Note: MatchZy can still be used for pug/scrim/practice without setting up matches (if <code>matchzy_kick_when_no_match_loaded</code> if set to <code>false</code>). Match setup is only required when you want to host a series and lock players in their correct team and side.</p> <p>In this documentation, we'll see how we can setup a match in MatchZy using a JSON file (structure of the JSON file is given below). There are 2 commands available which can be used to load a match:</p> <ol> <li><code>matchzy_loadmatch &lt;filepath&gt;</code>: Loads a JSON match configuration file relative to the <code>csgo</code> directory.</li> <li><code>matchzy_loadmatch_url &lt;url&gt; [header name] [header value]</code>: Loads a remote (JSON-formatted) match configuration by sending an HTTP(S) <code>GET</code> to the given URL. You may optionally provide an HTTP header and value pair using the <code>header name</code> and <code>header value</code> arguments. You should put all arguments inside quotation marks (<code>\"\"</code>). (<code>\"\"</code>).</li> </ol>"},{"location":"match_setup/#example","title":"Example","text":"<p>Example only</p> <p>Required fields: <code>\"maplist\"</code>, <code>\"team1\"</code>, <code>\"team2\"</code> and <code>\"num_maps\"``. If</code>\"matchid\"` is left empty, it will be auto-generated by the server.</p> csgo/astralis_vs_navi_27.json<pre><code>{\n  \"matchid\": \"27\",\n  \"team1\": {\n    \"name\": \"Astralis\",\n    \"players\": {\n      \"76561197990682262\": \"Xyp9x\",\n      \"76561198010511021\": \"gla1ve\",\n      \"76561197979669175\": \"K0nfig\",\n      \"76561198028458803\": \"BlameF\",\n      \"76561198024248129\": \"farlig\"\n    }\n  },\n  \"team2\": {\n    \"name\": \"NaVi\",\n    \"players\": {\n      \"76561198034202275\": \"s1mple\",\n      \"76561198044045107\": \"electronic\",\n      \"76561198246607476\": \"b1t\",\n      \"76561198121220486\": \"Perfecto\",\n      \"76561198040577200\": \"sdy\"\n    }\n  },\n  \"num_maps\": 3,\n  \"maplist\": [\n    \"de_mirage\",\n    \"de_overpass\",\n    \"de_inferno\"\n  ],\n  \"map_sides\": [\n    \"team1_ct\",\n    \"team2_ct\",\n    \"knife\"\n  ],\n  \"spectators\": {\n    \"players\": {\n      \"76561198264582285\": \"Anders Blume\"\n    }\n  },\n  \"clinch_series\": true,\n  \"players_per_team\": 5,\n  \"cvars\": {\n    \"hostname\": \"MatchZy: Astralis vs NaVi #27\",\n    \"mp_friendlyfire\": \"0\"\n  }\n}\n</code></pre> <p>This file can be loaded using :</p> <ol> <li><code>matchzy_loadmatch astralis_vs_navi_27.json</code> (if you have <code>astralis_vs_navi_27.json</code> in your <code>csgo</code> directory)</li> <li><code>matchzy_loadmatch_url \"https://&lt;url&gt;/astralis_vs_navi_27.json\"</code></li> </ol>"},{"location":"match_setup/#current-limitations","title":"Current Limitations?","text":"<ol> <li>Coaches cannot be added directly via this match configuration, hence to add a coach, add them to <code>\"players\"</code> key of the team and then use <code>.coach &lt;teamside&gt;</code> command in the server to start coaching.</li> <li>Only Steam64id is supported currently.</li> </ol> <p>These limitations will be resolved ASAP in the next updates! :D </p>"}]}